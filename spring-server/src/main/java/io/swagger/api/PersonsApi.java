/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.PagedCollectingItems;
import io.swagger.model.PagedPersons;
import io.swagger.model.Person;
import io.swagger.model.Persons;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-14T13:12:07.606Z")

@Api(value = "persons", description = "the persons API")
public interface PersonsApi {

    @ApiOperation(value = "Gets some persons", nickname = "personsGet", notes = "Returns a list containing all persons. The list supports paging.", response = Persons.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of Person", response = Persons.class),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Error.class),
        @ApiResponse(code = 200, message = "A totally unexpected response") })
    @RequestMapping(value = "/persons",
        produces = { "application/json", "application/x-yaml" }, 
        consumes = { "application/json", "application/x-yaml" },
        method = RequestMethod.GET)
    ResponseEntity<Persons> personsGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="User-Agent", required=true) String userAgent,@Min(0) @Max(100) @ApiParam(value = "Number of persons returned", defaultValue = "20") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="20") Integer pageSize,@ApiParam(value = "Page number", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "includeNonVerifiedUsers", required = false, defaultValue="false") Boolean includeNonVerifiedUsers,@Size(min=1,max=3) @ApiParam(value = "", defaultValue = "[-lastTimeOnline, +username]") @Valid @RequestParam(value = "sort", required = false, defaultValue="[-lastTimeOnline, +username]") List<String> sort);


    @ApiOperation(value = "Creates a person", nickname = "personsPost", notes = "Adds a new person to the persons list.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Person succesfully created."),
        @ApiResponse(code = 400, message = "Person couldn't have been created."),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Error.class),
        @ApiResponse(code = 200, message = "A totally unexpected response") })
    @RequestMapping(value = "/persons",
        produces = { "application/json", "application/x-yaml" }, 
        consumes = { "application/json", "application/x-yaml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> personsPost(@ApiParam(value = "" ,required=true) @RequestHeader(value="User-Agent", required=true) String userAgent,@ApiParam(value = "The person to create." ,required=true )  @Valid @RequestBody Person person);


    @ApiOperation(value = "Gets a person's collecting items list", nickname = "personsUsernameCollectingItemsGet", notes = "Returns a list containing all items this person is looking for. The list supports paging.", response = PagedCollectingItems.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A collected items list", response = PagedCollectingItems.class),
        @ApiResponse(code = 404, message = "Person does not exist."),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Error.class),
        @ApiResponse(code = 200, message = "A totally unexpected response") })
    @RequestMapping(value = "/persons/{username}/collecting-items",
        produces = { "application/json", "application/x-yaml" }, 
        consumes = { "application/json", "application/x-yaml" },
        method = RequestMethod.GET)
    ResponseEntity<PagedCollectingItems> personsUsernameCollectingItemsGet(@ApiParam(value = "The person's username",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true) @RequestHeader(value="User-Agent", required=true) String userAgent,@Min(0) @Max(100) @ApiParam(value = "Number of persons returned", defaultValue = "20") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="20") Integer pageSize,@ApiParam(value = "Page number", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@ApiParam(value = "", allowableValues = "AudioCassette, Vinyl, VHS") @Valid @RequestParam(value = "itemType", required = false) List<String> itemType);


    @ApiOperation(value = "Deletes a person", nickname = "personsUsernameDelete", notes = "Delete a single person identified via its username", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Person successfully deleted."),
        @ApiResponse(code = 404, message = "Person does not exist."),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Error.class),
        @ApiResponse(code = 200, message = "A totally unexpected response") })
    @RequestMapping(value = "/persons/{username}",
        produces = { "application/json", "application/x-yaml" }, 
        consumes = { "application/json", "application/x-yaml" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> personsUsernameDelete(@ApiParam(value = "The person's username",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true) @RequestHeader(value="User-Agent", required=true) String userAgent);


    @ApiOperation(value = "Gets a person's friends", nickname = "personsUsernameFriendsGet", notes = "Returns a list containing all persons. The list supports paging.", response = PagedPersons.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A person's friends list", response = PagedPersons.class),
        @ApiResponse(code = 404, message = "Person does not exist."),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Error.class),
        @ApiResponse(code = 200, message = "A totally unexpected response") })
    @RequestMapping(value = "/persons/{username}/friends",
        produces = { "application/json", "application/x-yaml" }, 
        consumes = { "application/json", "application/x-yaml" },
        method = RequestMethod.GET)
    ResponseEntity<PagedPersons> personsUsernameFriendsGet(@ApiParam(value = "The person's username",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true) @RequestHeader(value="User-Agent", required=true) String userAgent,@Min(0) @Max(100) @ApiParam(value = "Number of persons returned", defaultValue = "20") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="20") Integer pageSize,@ApiParam(value = "Page number", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "includeNonVerifiedUsers", required = false, defaultValue="false") Boolean includeNonVerifiedUsers,@Size(min=1,max=3) @ApiParam(value = "", defaultValue = "[-lastTimeOnline, +username]") @Valid @RequestParam(value = "sort", required = false, defaultValue="[-lastTimeOnline, +username]") List<String> sort);


    @ApiOperation(value = "Gets a person", nickname = "personsUsernameGet", notes = "Returns a single person for its username.", response = Person.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A Person", response = Person.class),
        @ApiResponse(code = 404, message = "Person does not exist."),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Error.class),
        @ApiResponse(code = 200, message = "A totally unexpected response") })
    @RequestMapping(value = "/persons/{username}",
        produces = { "application/json", "application/x-yaml" }, 
        consumes = { "application/json", "application/x-yaml" },
        method = RequestMethod.GET)
    ResponseEntity<Person> personsUsernameGet(@ApiParam(value = "The person's username",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true) @RequestHeader(value="User-Agent", required=true) String userAgent);

}
